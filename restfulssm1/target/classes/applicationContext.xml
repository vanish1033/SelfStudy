<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--加载属性配置文件
        location:指定配置文件的位置
        使用"classpath:"关键字表示类路径
    -->
    <context:property-placeholder location="classpath:db.properties"/>


    <!-- spring容器配置， 把对象交给spring创建-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--设值连接数据库的属性-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--声明SqlSessionFactoryBean, 在这个类的内部创建SqlSessionFactory
    根据数据库连接池和mybatis配置文件创建SqlSession-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源DataSource-->
        <property name="dataSource" ref="myDataSource"/><!--setDataSource(myDataSource)-->
        <!--指定主配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--        setConfigLocation("classpath:mybatis-config.xml")-->
    </bean>


    <!--声明mybatis的扫描器，负责使用mybatis动态代理技术，创建dao接口的对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--设值dao所在的包名-->
        <property name="basePackage" value="com.bjpowernode.dao"/>
    </bean>


    <!-- 注解扫描器 -->
    <context:component-scan base-package="com.bjpowernode.*"/>
    <!--        <context:exclude-filter type="annotation" expression="com.bjpowernode.com.bjpowernode.controller"/>-->
    <!--    </context:component-scan>-->


    <!--声明事务管理器对象,让spring掌控数据库的连接源，以此掌控事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--声明开启事务注解驱动：告诉spring使用注解处理事务
        transaction-manager:事务管理器对象的id
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--
    声明自动代理生成器 使用spring-aop.xsd约束文件
        作用：把spring容器中所有的目标对象，创建出代理对象。
        使用aspectj的功能，修改内存中的目标对象，把目标对象修改为代理
        -->
    <!--    <aop:aspectj-autoproxy/>-->
</beans>